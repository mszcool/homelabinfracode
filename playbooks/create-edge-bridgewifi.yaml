---
- name: Ensure global machine pre-requisites are met
  import_playbook: bootstrap-machines.yaml
  when: skip_bootstrap is not defined

- name: Configure Raspberry Pi Edge with bridged WiFi
  hosts: "{{ target_host }}"
  become: true
  gather_facts: false
  remote_user: "{{ lookup('env', 'USE_SSH_USER_NAME') }}"

  vars:
    target_host: edgepi
    edge_config: ../configs/pi-edge-config.yaml
    target_user: "{{ lookup('env', 'USE_SSH_USER_NAME') }}"
    edge_wifi_password: "{{ lookup('env', 'USE_WIFI_PASSWORD') }}"

  # First, ensure the pre-requisites are met
  pre_tasks:
    # First, make sure the environment variable for SSH access to the nodes is present.
    - include_tasks: ../tasklib/checkuserenv-tasks.yaml

  # Execute the main configuration flow.
  tasks:
    - name: Include pi-edge configuration settings
      include_vars: "{{ edge_config }}"

    - name: Pre-Checks - Check if the USE_WIFI_PASSWORD environment variable is set
      vars:
        env_var_name: "USE_WIFI_PASSWORD"
      assert:
        that:
          - "lookup('env','{{ env_var_name }}')"
        fail_msg: "Please set the {{ env_var_name }} environment variable before executing this playbook!"

    - name: Pre-Checks - Check if backup for sysctl.conf.default exists
      stat:
        path: "/home/{{ target_user }}/sysctl.conf.default"
      register: sysctl_conf_default_file

    - name: Prepare - Install additional pre-requisites for WiFi bridging
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - hostapd
        - bridge-utils
        - wpasupplicant
        - iptables-persistent

    - name: Clean-Up - Restore original sysctl.conf (if backup exists)
      copy:
        src: "/home/{{ target_user }}/sysctl.conf.default"
        dest: /etc/sysctl.conf
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: 0644
        remote_src: true
      when: sysctl_conf_default_file.stat.exists

    - name: Clean-Up - Edge-Wifi clean existing firewall rules
      command: ufw --force reset
      ignore_errors: true
      register: cleanupresult
      changed_when: cleanupresult.failed == false

    - name: Clean-Up - Stop hostapd service
      service:
        name: hostapd
        state: stopped
        enabled: false

    - name: System Config - Enable IP forwarding (current session)
      command: sysctl -w net.ipv4.ip_forward=1
      ignore_errors: true
      register: systemconfigresult
      changed_when: systemconfigresult.failed == false

    - name: System Config - Backup sysctl.conf.default in the user's home directory
      copy:
        src: /etc/sysctl.conf
        dest: "/home/{{ target_user }}/sysctl.conf.default"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: 0644
        remote_src: true
      when: not sysctl_conf_default_file.stat.exists

    - name: System Config - Enable IP forwarding (permanent in sysctl.conf)
      lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.ip_forward=1"
        state: present
      register: ip_forwarding_result
      changed_when: ip_forwarding_result.changed

    - name: Edge WiFi - Stop and disable wpa_supplicant service
      service:
        name: wpa_supplicant
        state: stopped
        enabled: false

    - name: Edge WiFi - Get all rfkill Wireless devices
      shell: |
        set -o pipefail
        rfkill list | grep Wireless
      args:
        executable: "/bin/bash"
      register: rfkill_output
      changed_when: rfkill_output.failed == false

    - name: Edge WiFi - Unblock all WiFi adapters from rfkill
      command: rfkill unblock {{ item }}
      loop: "{{ rfkill_output.stdout_lines | map('regex_replace', '^(\\d+):.*$', '\\1') | list }}"
      register: unblock_result
      changed_when: unblock_result.stdout != ""

    - name: Edge WiFi - Start WiFi adapter
      command: "ip link set dev {{ edge_wifi_adapter }} up"
      register: updateresultusbstart
      changed_when: updateresultusbstart.failed == false

    - name: Edge WiFi - Configure bridge to persist across reboots
      blockinfile:
        path: /etc/network/interfaces
        block: |
          auto {{ edge_bridge_name }}
          iface {{ edge_bridge_name }} inet dhcp
            bridge_ports {{ main_adapter }} {{ edge_wifi_adapter }}
        mode: 0644
        create: true

    - name: Edge Access Point - Generate WPA2 passphrase
      command: "wpa_passphrase \"{{ edge_local_wifi_name }}\" \"{{ edge_wifi_password }}\""
      register: wpa_passphrase_result
      changed_when: wpa_passphrase_result.failed == false

    - name: Edge Access Point - Save wpa_passphrase output
      set_fact:
        wpa_passphrase: "{{ (wpa_passphrase_result.stdout | regex_search('(psk=)(\\w+)', '\\2'))[0] }}"

    - name: Edge Access Point - Configure hostapd incl. wpa passphrase
      template:
        src: create-edge-multiwifi-hostapd.j2
        dest: /etc/hostapd/hostapd.conf
        mode: 0644

    - name: Edge Access Point - Start hostapd service with custom configuration
      template:
        src: create-edge-multiwifi-hostapd.service.j2
        dest: /etc/systemd/system/hostapd.service
        mode: 0644

    - name: Edge Access Point - On Raspberry Pi, after install, hostapd is masked and must be unmasked
      command: systemctl unmask hostapd.service
      register: unmask_hostapd_result
      changed_when: unmask_hostapd_result.failed == false

    - name: Edge Access Point - Enable hostapd at boot
      service:
        name: "{{ item }}"
        enabled: true
      loop:
        - hostapd

    - name: Edge Access Point - Restart hostapd
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - hostapd

    - name: Firewall - General allow connections on Raspberry Pi
      ufw:
        rule: allow
        port: "{{ item }}"
      loop: "{{ edge_fw_allowed_ports }}"
      register: ufw_port_result
      changed_when: ufw_port_result.changed

    - name: Firewall - Add UFW rules to allow bridged traffic
      ansible.builtin.blockinfile:
        path: /etc/ufw/before.rules
        marker_begin: "# Ansible-managed: Custom UFW rules for bridge, don't edit"
        marker_end: "# Ansible-managed: Custom UFW rules for bridge, end"
        insertbefore: 'COMMIT'
        block: |
          -A ufw-before-forward -i {{ edge_bridge_name }} -j ACCEPT

    - name: Firewall - Enable ufw
      command: ufw --force enable
      register: ufw_start_result
      changed_when: ufw_start_result.changed

    - name: Reboot Workaround - Create hostapd-restart.sh script (for bridge, also restarts networking)
      copy:
        content: |
          #!/bin/bash
          systemctl restart hostapd
          systemctl restart networking.service
        dest: /usr/local/bin/hostapd-restart.sh
        mode: '0755'

    - name: Reboot Workaround - Create hostapd-restart systemd service
      template:
        src: create-edge-multiwifi-hostapd-restart.j2
        dest: /etc/systemd/system/hostapd-restart.service
        mode: '0644'

    - name: Reboot Workaround - Enable hostapd-restart service
      systemd:
        name: hostapd-restart.service
        state: started
        enabled: true
