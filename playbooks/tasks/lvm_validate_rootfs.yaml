---
- name: Gather facts about LVM configuration
  ansible.builtin.setup:
    gather_subset:
      - hardware
  register: system_facts

- name: Check if root partition exists on correct device
  ansible.builtin.shell: >
    set -o pipefail &&
    lsblk -o NAME,MAJ:MIN,RM,SIZE,RO,TYPE,MOUNTPOINT |
    grep -E '{{ diskdata.root_partition.device.split("/")[-1] }}{{ diskdata.root_partition.partition_nr }}'
  args:
    executable: /bin/bash
  register: root_partition_check
  failed_when: false
  changed_when: false

- name: Fail if root partition does not exist
  ansible.builtin.fail:
    msg: "Root partition {{ diskdata.root_partition.device }}{{ diskdata.root_partition.partition_nr }} does not exist or is not configured properly."
  when: root_partition_check.rc != 0

- name: Check volume group existence
  community.general.lvg:
    vg: "{{ param_volume_group_name }}"
    state: present
  check_mode: true
  register: vg_check
  failed_when: false
  changed_when: false

- name: Fail if volume group does not exist
  ansible.builtin.fail:
    msg: "Volume group {{ param_volume_group_name }} does not exist."
  when: vg_check is failed

- name: Check if root logical volume exists and has correct size
  community.general.lvol:
    vg: "{{ param_volume_group_name }}"
    lv: "{{ param_volume_group_volume_root }}"
    size: "{{ diskdata.root_partition.size }}"
    state: present
  check_mode: true
  register: lv_root_check
  failed_when: false
  changed_when: false

- name: Fail if root logical volume does not exist or has wrong size
  ansible.builtin.fail:
    msg: >
      Root logical volume {{ param_volume_group_name }}/{{ param_volume_group_volume_root }}
      does not exist or doesn't have the expected size of {{ diskdata.root_partition.size }}.
  when: lv_root_check is changed or lv_root_check is failed

- name: Get current partition information using parted
  community.general.parted:
    device: "{{ diskdata.expected_partition_setup.device }}"
    state: info
    unit: "GiB"
  register: current_partition_info
  changed_when: false

- name: Gathered partition setup
  ansible.builtin.debug:
    msg: "{{ current_partition_info }}"

- name: Set fact for expected partitions
  ansible.builtin.set_fact:
    expected_partitions: "{{ diskdata.expected_partition_setup.partitions | map(attribute='partition') | list }}"

- name: Validate partition count
  ansible.builtin.assert:
    that:
      - "current_partition_info.partitions | length == expected_partitions | length"
    fail_msg: "Partition count mismatch - expected {{ expected_partitions | length }} partitions but found {{ current_partition_info.partitions | length }} partitions"
    success_msg: "Partition count matches expected configuration"

- name: Validate each partition
  ansible.builtin.assert:
    that:
      - "current_part.num == expected_part.partition_nr"
    fail_msg: "Partition {{ current_part.num }} does not match expected configuration"
    success_msg: "Partition {{ current_part.num }} matches expected configuration"
  vars:
    expected_part: "{{ expected_partitions | selectattr('partition_nr', 'equalto', current_part.num) | first }}"
  when: expected_partitions | selectattr('partition_nr', 'equalto', current_part.num) | list | length > 0
  loop: "{{ current_partition_info.partitions }}"
  loop_control:
    loop_var: current_part

- name: Validate partition sizes (approximate match)
  ansible.builtin.debug:
    msg: "Validating partition {{ current_part.num }} size: {{ current_part.size }} against expected: {{ expected_part.size }}"
  vars:
    expected_part: "{{ expected_partitions | selectattr('partition_nr', 'equalto', current_part.num) | first }}"
    normalized_current_size: "{{ current_part.size | float }}"
    normalized_expected_size: >-
      {% if 'GiB' in expected_part.size %}
      {{ expected_part.size | replace('GiB', '') | float }}
      {% elif 'G' in expected_part.size %}
      {{ expected_part.size | replace('G', '') | float }}
      {% else %}
      {{ expected_part.size | float }}
      {% endif %}
    size_threshold: 0.1  # Allow 10% tolerance for size difference
  when:
    - expected_partitions | selectattr('partition_nr', 'equalto', current_part.num) | list | length > 0
  loop: "{{ current_partition_info.partitions }}"
  loop_control:
    loop_var: current_part
