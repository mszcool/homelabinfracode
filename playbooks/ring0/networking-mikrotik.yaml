---
- name: Networking setup for devices (DNS names, static address assignments etc.) for Mikrotik.
  hosts: localhost
  become: false
  gather_facts: false

  vars:
    param_router_time_zone: "{{ timezone }}"
    param_firewall_rule_groups: "{{ firewall_rules }}"
    param_root_user_name: "{{ users.root.name }}"
    param_root_user_password_env: "{{ users.root.password_env }}"
    param_root_user_ssh_pub_key: "{{ users.root.ssh_key }}"
    param_automation_user_name: "{{ users.automation.name }}"
    param_automation_user_password_env: "{{ users.automation.password_env }}"
    param_automation_user_ssh_pub_key: "{{ users.automation.ssh_key }}"
    param_router_name: "{{ mainrouterconfig.hostname }}"
    param_wan_interface_list: "{{ mainrouterconfig.wan_interface_list }}"
    param_lan_interface_list: "{{ mainrouterconfig.lan_interface_list }}"
    param_loopback_interface_name: "{{ mainrouterconfig.loopback_interface_name }}"
    param_wan_interface_name: "{{ mainrouterconfig.wan_interface.interface }}"
    param_lan_interface_bridge_name: "{{ mainrouterconfig.lan_interface.bridge }}"
    param_lan_interface_members: "{{ mainrouterconfig.lan_interface.interfaces }}"
    param_lan_interface_bridge_ip_address: "{{ mainrouterconfig.lan_interface.ipaddr }}"
    param_start_marker_text: "{{ start_marker_text }}"
    param_end_marker_text: "{{ end_marker_text }}"

  tasks:
    - name: Get the current user running the playbook
      ansible.builtin.set_fact:
        current_user: "{{ lookup('env', 'USER') }}"

    - name: Set the script file name for phase 1
      ansible.builtin.set_fact:
        param_script_file_phase1_name: "{{ param_router_name }}-phase1-bootstrap.rsc"

    - name: Set the script file name for phase 2
      ansible.builtin.set_fact:
        param_script_file_phase2_name: "{{ param_router_name }}-phase2-bootstrap.rsc"

    - name: Check if the environment variable with the value from root_password is set
      ansible.builtin.assert:
        that:
          - lookup('env', item)
        fail_msg: "Please set the {{ item }} environment variable before executing this playbook!"
      loop:
        - "{{ param_root_user_password_env }}"
        - "{{ param_automation_user_password_env }}"

    - name: Get the password from the environment variable
      ansible.builtin.set_fact:
        param_root_user_password: "{{ lookup('env', param_root_user_password_env) }}"
        param_automation_user_password: "{{ lookup('env', param_automation_user_password_env) }}"

    - name: Create SSL certificates directory if it doesn't exist
      ansible.builtin.file:
        path: "/home/{{ current_user }}/mszcool_ssl"
        state: directory
        mode: "0755"

    - name: Set SSL certificate variables
      ansible.builtin.set_fact:
        ssl_dir: "/home/{{ current_user }}/mszcool_ssl"
        ca_key: "/home/{{ current_user }}/mszcool_ssl/mszcool_ssl_selfroot.key"
        ca_cert: "/home/{{ current_user }}/mszcool_ssl/mszcool_ssl_selfroot.crt"
        server_key: "/home/{{ current_user }}/mszcool_ssl/{{ param_router_name }}.key"
        server_csr: "/home/{{ current_user }}/mszcool_ssl/{{ param_router_name }}.csr"
        server_cert: "/home/{{ current_user }}/mszcool_ssl/{{ param_router_name }}.crt"
        router_fqdn: "{{ routername }}.{{ localdomain }}"
        router_ip: "{{ param_lan_interface_bridge_ip_address }}"

    - name: Check if root CA certificate exists
      ansible.builtin.stat:
        path: "{{ ca_cert }}"
      register: ca_cert_stat

    - name: Generate root CA private key
      ansible.builtin.command:
        cmd: openssl genrsa -out {{ ca_key }} 4096
      args:
        creates: "{{ ca_key }}"
      when: not ca_cert_stat.stat.exists

    - name: Generate root CA certificate
      ansible.builtin.command:
        cmd: >
          openssl req -x509 -new -nodes -key {{ ca_key }}
          -sha256 -days 36500
          -out {{ ca_cert }}
          -subj "/C=EU/ST=State/L=City/O=MszCool Organization/OU=IT Department/CN=MszCool Root CA"
      args:
        creates: "{{ ca_cert }}"
      when: not ca_cert_stat.stat.exists

    - name: Generate server private key
      ansible.builtin.command:
        cmd: openssl genrsa -out {{ server_key }} 2048
      args:
        creates: "{{ server_key }}"

    - name: Create OpenSSL config file for SAN support
      ansible.builtin.template:
        src: templates/mikrotik-ssh-config.cnf.j2
        dest: "{{ ssl_dir }}/ssl_config.cnf"
        mode: "0644"
      vars:
        alt_names:
          - "{{ routername }}"
          - "{{ router_fqdn }}"
          - "{{ router_ip }}"

    - name: Generate server CSR
      ansible.builtin.command:
        cmd: >
          openssl req -new -key {{ server_key }}
          -out {{ server_csr }}
          -config {{ ssl_dir }}/ssl_config.cnf
          -subj "/C=EU/ST=State/L=City/O=MszCool Organization/OU=IT Department/CN={{ router_fqdn }}"
      args:
        creates: "{{ server_csr }}"

    - name: Generate server certificate
      ansible.builtin.command:
        cmd: >
          openssl x509 -req -in {{ server_csr }}
          -CA {{ ca_cert }} -CAkey {{ ca_key }}
          -CAcreateserial -out {{ server_cert }}
          -days 365 -sha256
          -extensions v3_req
          -extfile {{ ssl_dir }}/ssl_config.cnf
      args:
        creates: "{{ server_cert }}"

    - name: Create a folder to have all files for upload in a single location
      ansible.builtin.file:
        path: "/home/{{ current_user }}/{{ param_router_name }}"
        state: directory
        mode: "0755"

    - name: Copy the generated SSL files to the upload folder
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/home/{{ current_user }}/{{ param_router_name }}/"
        mode: "0644"
      loop:
        - "{{ ca_cert }}"
        - "{{ server_key }}"
        - "{{ server_cert }}"

    - name: Create Mikrotik bootstrap PHASE-1 script file. Upload to RouterOS and execute WITHIN WINBOX64.EXE using /import scriptfilename.rsc
      ansible.builtin.template:
        src: templates/mikrotik-main-default-phase1.rsc.j2
        dest: "/home/{{ current_user }}/{{ param_router_name }}/{{ param_script_file_phase1_name }}"
        mode: "0644"

    - name: Create Mikrotik bootstrap PHASE-2 script file. Upload this to RouterOS and execute THROUGH SSH SHELL using /import scriptfilename.rsc
      ansible.builtin.template:
        src: templates/mikrotik-main-default-phase2.rsc.j2
        dest: "/home/{{ current_user }}/{{ param_router_name }}/{{ param_script_file_phase2_name }}"
        mode: "0644"
