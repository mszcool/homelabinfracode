---
- name: Host setup for bare-metal servers running Incus.
  hosts: localhost
  become: false
  gather_facts: true

  vars:
    param_root_user_name: "{{ root_user }}"
    param_root_user_fullname: "{{ root_user_fullname }}"
    param_root_user_password_clear: "{{ lookup('env', root_user_password_env) }}"
    param_root_user_publickey: "{{ root_user_publickey }}"
    param_iso_source_url: "{{ iso_source_url }}"
    param_iso_source_path: "{{ iso_source_path }}"
    param_iso_destination_path: "{{ iso_destination_path }}"
    param_iso_working_path: "{{ iso_working_path }}"
    param_volume_disk_configs: "{{ volume_disk_configs }}"
    param_iso_extracted_path: "{{ iso_working_path }}/iso_extracted"
    param_minimum_packages: "{{ minimum_packages }}"

  tasks:
    - name: Install required packages for password encryption
      ansible.builtin.apt:
        name:
          - whois  # Contains mkpasswd utility
        state: present
        update_cache: true

    - name: Generate random salt for password.
      ansible.builtin.shell: |
        set -o pipefail &&
        tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 16 || true
      args:
        executable: /bin/bash
      register: random_salt
      no_log: true
      changed_when: false

    - name: Generate encrypted password for preseed with custom salt and rounds
      ansible.builtin.shell: |
        mkpasswd -m sha-512 -R 65536 -S {{ random_salt.stdout }} '{{ param_root_user_password_clear }}'
      register: encrypted_password
      no_log: true
      changed_when: false

    - name: Set password fact
      ansible.builtin.set_fact:
        param_root_user_password: "{{ encrypted_password.stdout }}"
      no_log: true

    - name: Pre-requisites -- Install required packages
      ansible.builtin.apt:
        name:
          - xorriso
          - isolinux
          - p7zip-full
          - genisoimage
        state: present
        update_cache: true

    - name: Pre-requisites -- Download Ubuntu ISO if not already present
      ansible.builtin.get_url:
        url: "{{ param_iso_source_url }}"
        dest: "{{ param_iso_source_path }}"
        mode: '0644'
      register: download_result
      changed_when: download_result.changed

    - name: Create working directory
      ansible.builtin.file:
        path: "{{ param_iso_working_path }}"
        state: directory
        mode: '0755'

    - name: Create ISO extraction directory
      ansible.builtin.file:
        path: "{{ param_iso_extracted_path }}"
        state: directory
        mode: '0755'

    - name: Extract ISO once
      ansible.builtin.command:
        cmd: "7z x {{ param_iso_source_path }} -o{{ param_iso_extracted_path }}"
        creates: "{{ param_iso_extracted_path }}/[BOOT]"
      register: extract_result

    - name: Create preseed directory if not exists
      ansible.builtin.file:
        path: "{{ param_iso_extracted_path }}/preseed"
        state: directory
        mode: '0755'

    - name: Process each disk configuration
      ansible.builtin.include_tasks: host-incus-image-process-disk-tasks.yml
      loop: "{{ param_volume_disk_configs }}"
      loop_control:
        loop_var: disk_config
        label: "{{ disk_config.name }}"

    - name: Clean up extraction directory
      ansible.builtin.file:
        path: "{{ param_iso_extracted_path }}"
        state: absent
