---
# Host setup for bare-metal servers running Incus.
# This playbook generates preseed files for each server configuration type.
#
# Usage examples:
#   # Generate preseeds in configs directory:
#   ansible-playbook -i configs/host-incus-cluster.yaml playbooks/ring0/host-incus-image-main.yaml
#
#   # Generate preseeds in configs.private directory:
#   ansible-playbook -i configs.private/infra-bootstrap/host-incus-cluster.yaml \
#                    -e preseed_output_dir=configs.private/infra-bootstrap \
#                    playbooks/ring0/host-incus-image-main.yaml
#
- name: Host setup for bare-metal servers running Incus.
  hosts: localhost
  become: false
  gather_facts: false

  vars:
    param_root_user_name: "{{ root_user }}"
    param_root_user_fullname: "{{ root_user_fullname }}"
    param_root_user_password_clear: "{{ lookup('env', root_user_password_env) }}"
    param_root_user_publickey: "{{ root_user_publickey }}"
    param_iso_source_url: "{{ iso_source_url }}"
    param_iso_source_path: "{{ lookup('env', 'HOME') }}{{ iso_source_path }}"
    param_iso_destination_path: "{{ lookup('env', 'HOME') }}{{ iso_destination_path }}"
    param_iso_working_path: "{{ lookup('env', 'HOME') }}{{ iso_working_path }}"
    param_volume_group_name: "{{ volume_group_name }}"
    param_host_configs: "{{ host_configs | default([]) }}"
    param_minimum_packages: "{{ minimum_packages }}"
    param_incus_config: "{{ incus_config }}"
    # Output directory for preseed files - can be overridden with -e preseed_output_dir=path
    param_preseed_output_dir: "{{ incus_preseed_output_dir | default('configs') }}"

  tasks:
    - name: Pre-requisites -- Install required packages
      become: true
      ansible.builtin.apt:
        name:
          - whois  # Contains mkpasswd utility
          - xorriso
          - isolinux
          - p7zip-full
          - genisoimage
        state: present
        update_cache: true

    - name: Pre-requisites -- Ensure the ~/iso directory exists
      ansible.builtin.file:
        path: "{{ param_iso_destination_path | expanduser }}"
        state: directory
        mode: '0755'

    - name: Pre-requisites -- Download Ubuntu ISO if not already present
      ansible.builtin.get_url:
        url: "{{ param_iso_source_url }}"
        dest: "{{ param_iso_source_path }}"
        mode: '0644'
        timeout: 3600
      register: download_result
      changed_when: download_result.changed

    - name: Pre-Processing -- Generate random hostname
      ansible.builtin.shell: |
        set -o pipefail &&
        tr -dc 'a-z0-9' < /dev/urandom | head -c 8
      args:
        executable: /bin/bash
      register: random_hostname
      changed_when: false
      failed_when: random_hostname.rc != 0 and random_hostname.rc != 141  # 141 is the exit code for head when it reaches EOF

    - name: Pre-Processing -- Set hostname fact
      ansible.builtin.set_fact:
        param_random_hostname: "host-{{ random_hostname.stdout }}"

    - name: Pre-Processing -- Set variable for password generation task.
      ansible.builtin.set_fact:
        generate_password_input: "{{ param_root_user_password_clear | default('') }}"
      no_log: true

    - name: Pre-Processing -- Generate Linux password with input
      ansible.builtin.include_tasks:
        file: ../tasks/generate_lx_passwd.yaml

    - name: Pre-Processing -- Set password fact
      ansible.builtin.set_fact:
        param_root_user_password: "{{ generated_lx_password }}"
      no_log: true

    - name: Pre-Processing -- Create working directory
      ansible.builtin.file:
        path: "{{ param_iso_working_path }}"
        state: directory
        mode: '0755'

    - name: Processing -- Extract ISO using xorriso including the boot partition
      ansible.builtin.command:
        cmd: >
          xorriso -osirrox on -indev {{ param_iso_source_path }}
          -extract_boot_images "{{ param_iso_working_path }}/bootpart" -extract / {{ param_iso_working_path }}
      args:
        creates: "{{ param_iso_working_path }}/bootpart"
      register: extract_result

    - name: Processing -- Create autoinstall directory in ISO
      ansible.builtin.file:
        path: "{{ param_iso_working_path }}/autoinstall"
        state: directory
        mode: '0755'

    - name: Processing -- Ensure preseed output directory exists
      ansible.builtin.file:
        path: "{{ param_preseed_output_dir }}"
        state: directory
        mode: '0755'

    - name: Processing -- Generate Incus preseed configuration for each server type
      ansible.builtin.template:
        src: incus-preseed.yaml.j2
        dest: "{{ param_preseed_output_dir }}/incus.preseed.{{ host_config.name }}.yaml"
        mode: '0600'
      vars:
        tp_incus_config: "{{ param_incus_config }}"
        tp_incus_netconfig: "{{ host_config.network_config }}"
      loop: "{{ param_host_configs }}"
      loop_control:
        loop_var: host_config
        label: "{{ host_config.name }}"

    - name: Processing -- Generate Incus production profile configuration for each server type
      ansible.builtin.template:
        src: incus-profile-production.yaml.j2
        dest: "{{ param_preseed_output_dir }}/incus.profile-production.{{ host_config.name }}.yaml"
        mode: '0600'
      vars:
        tp_incus_config: "{{ param_incus_config }}"
      loop: "{{ param_host_configs }}"
      loop_control:
        loop_var: host_config
        label: "{{ host_config.name }}"

    - name: Processing -- Process each disk configuration
      ansible.builtin.include_tasks: ./tasks/host-incus-image-process-disk-tasks.yml
      loop: "{{ param_host_configs }}"
      loop_control:
        loop_var: host_config_item
        label: "{{ host_config_item.name }}"