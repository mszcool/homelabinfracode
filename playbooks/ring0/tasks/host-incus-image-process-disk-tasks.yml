---
# Tasks for processing each disk configuration to create a custom ISO

- name: Processing per disk config -- Copy Incus preseed file to ISO
  ansible.builtin.copy:
    src: "{{ param_preseed_output_dir }}/incus.preseed.{{ host_config_item.name }}.yaml"
    dest: "{{ param_iso_working_path }}/autoinstall/incus-preseed.yaml"
    mode: '0644'

- name: Processing per disk config -- Generate and copy Incus first-boot script to ISO
  ansible.builtin.template:
    src: "templates/ubuntu-inst-incus-firstboot-setup.sh.j2"
    dest: "{{ param_iso_working_path }}/autoinstall/incus-firstboot-setup.sh"
    mode: '0755'
  vars:
    tp_root_user: "{{ root_user }}"

- name: Processing per disk config -- Copy Incus production profile to ISO
  ansible.builtin.copy:
    src: "{{ param_preseed_output_dir }}/incus.profile-production.{{ host_config_item.name }}.yaml"
    dest: "{{ param_iso_working_path }}/autoinstall/incus-profile-production.yaml"
    mode: '0644'

- name: Processing per disk config -- Copy Incus systemd service file to ISO
  ansible.builtin.copy:
    src: "templates/ubuntu-inst-incus-firstboot-setup.service"
    dest: "{{ param_iso_working_path }}/autoinstall/incus-firstboot-setup.service"
    mode: '0644'

- name: Processing per disk config -- Verify files were copied to ISO
  ansible.builtin.stat:
    path: "{{ item }}"
  register: iso_files_stat
  loop:
    - "{{ param_iso_working_path }}/autoinstall/incus-preseed.yaml"
    - "{{ param_iso_working_path }}/autoinstall/incus-firstboot-setup.sh"
    - "{{ param_iso_working_path }}/autoinstall/incus-profile-production.yaml"
    - "{{ param_iso_working_path }}/autoinstall/incus-firstboot-setup.service"

- name: Processing per disk config -- Display copy results
  ansible.builtin.debug:
    msg: "Incus files for {{ host_config_item.name }} copied successfully to ISO"
  when: iso_files_stat.results | map(attribute='stat.exists') | list | unique == [true]

- name: Processing per disk config -- Generate autoinstall configuration
  ansible.builtin.template:
    src: "templates/ubuntu-inst-autoinstall.yaml.j2"
    dest: "{{ param_iso_working_path }}/autoinstall.yaml"
    mode: '0644'
  vars:
    tp_hostname: "{{ param_random_hostname }}"
    tp_volgroupname: "{{ param_volume_group_name }}"
    tp_diskdata: "{{ host_config_item.virtual_disk_config }}"
    tp_packages: "{{ param_minimum_packages }}"
    tp_localdomain: "{{ localdomain }}"
    tp_root_user: "{{ root_user }}"
    tp_root_user_fullname: "{{ root_user_fullname }}"
    tp_root_user_password: "{{ param_root_user_password }}"  # This is now the encrypted password
    tp_root_user_publickey: "{{ root_user_publickey }}"

- name: Processing per disk config -- Create custom GRUB config for autoinstall
  become: true
  ansible.builtin.copy:
    dest: "{{ param_iso_working_path }}/boot/grub/grub.cfg"
    mode: '0644'
    backup: true
    content: |
      # Custom GRUB configuration for Ubuntu autoinstall
      # Generated by mszcool's homelab infrastructure code
      
      set default=0
      set timeout=10
      set timeout_style=menu
      
      # Load necessary modules
      insmod part_gpt
      insmod part_msdos
      insmod fat
      insmod iso9660
      insmod all_video
      insmod gfxterm
      insmod font
      
      # Set up graphics
      if loadfont /boot/grub/fonts/unicode.pf2; then
        set gfxmode=auto
        insmod gfxterm
        terminal_output gfxterm
      fi
      
      # Main autoinstall entry
      menuentry "*** AUTOINSTALL by mszcool - WILL WIPE ALL DISKS ***" {
          echo "Loading Ubuntu autoinstall..."
          echo "WARNING: This will completely wipe all disks on this system!"
          linux /casper/vmlinuz --- autoinstall ds=nocloud;s=/cdrom/autoinstall/ boot=casper noprompt noeject quiet splash
          initrd /casper/initrd
      }
      
      # Emergency manual install option
      menuentry "Manual Ubuntu Server Installation (Safe Mode)" {
          echo "Loading Ubuntu installer in manual mode..."
          linux /casper/vmlinuz --- boot=casper quiet splash
          initrd /casper/initrd
      }
      
      # Reboot option
      menuentry "Reboot System" {
          echo "Rebooting..."
          reboot
      }
      
      # Shutdown option
      menuentry "Shutdown System" {
          echo "Shutting down..."
          halt
      }

- name: Processing per disk config -- Create custom ISO.
  ansible.builtin.command:
    cmd: >
      xorriso -as mkisofs
      -iso-level 3
      -full-iso9660-filenames
      -volid "UBUNTU_CUSTOM"
      -eltorito-boot bootpart/eltorito_img1_bios.img
      -no-emul-boot
      -boot-load-size 4
      -boot-info-table
      -eltorito-alt-boot
      -eltorito-catalog bootpart/eltorito_catalog.img
      -e bootpart/eltorito_img2_uefi.img
      -no-emul-boot
      -append_partition 2 C12A7328-F81F-11D2-BA4B-00A0C93EC93B {{ param_iso_working_path }}/bootpart/gpt_part2_efi.img
      -appended_part_as_gpt
      -isohybrid-gpt-basdat
      -isohybrid-mbr {{ param_iso_working_path }}/bootpart/mbr_code_grub2.img
      -o {{ param_iso_destination_path }}/ubuntu-custom-{{ host_config_item.name }}.iso
      {{ param_iso_working_path }}
  args:
    creates: "{{ param_iso_destination_path }}/ubuntu-custom-{{ host_config_item.name }}.iso"

- name: Processing per disk config -- Verify ISO was created.
  ansible.builtin.stat:
    path: "{{ param_iso_destination_path }}/ubuntu-custom-{{ host_config_item.name }}.iso"
  register: iso_stat

- name: Processing per disk config -- Display ISO creation result.
  ansible.builtin.debug:
    msg: "Custom ISO for {{ host_config_item.name }} created successfully at {{ param_iso_destination_path }}/ubuntu-custom-{{ host_config_item.name }}.iso"
  when: iso_stat.stat.exists
