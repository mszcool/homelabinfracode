---
# Tasks for processing each disk configuration to create a custom ISO

- name: Processing per disk config -- Generate autoinstall configuration
  ansible.builtin.template:
    src: "host-templates/autoinstall.yaml.j2"
    dest: "{{ param_iso_working_path }}/autoinstall.yaml"
    mode: '0644'
  vars:
    tp_hostname: "{{ param_random_hostname }}"
    tp_volgroupname: "{{ param_volume_group_name }}"
    tp_diskdata: "{{ disk_config }}"
    tp_packages: "{{ param_minimum_packages }}"
    tp_localdomain: "{{ localdomain }}"
    tp_root_user: "{{ root_user }}"
    tp_root_user_fullname: "{{ root_user_fullname }}"
    tp_root_user_password: "{{ param_root_user_password }}"  # This is now the encrypted password
    tp_root_user_publickey: "{{ root_user_publickey }}"

- name: Processing per disk config -- Update GRUB config for autoinstall
  ansible.builtin.blockinfile:
    path: "{{ param_iso_working_path }}/boot/grub/grub.cfg"
    marker: "# {mark} AUTOINSTALL CONFIG"
    insertbefore: "menuentry \"Try or Install Ubuntu Server\" {"
    block: |
      set default=0
      set timeout=5

      menuentry "Autoinstall by mszcool" {
          linux /casper/vmlinuz --- autoinstall ds=nocloud;s=/cdrom/autoinstall/
          initrd /casper/initrd
      }

- name: Processing per disk config -- Create custom ISO.
  ansible.builtin.command:
    cmd: >
      xorriso -as mkisofs
      -iso-level 3
      -full-iso9660-filenames
      -volid "UBUNTU_CUSTOM"
      -eltorito-boot bootpart/eltorito_img1_bios.img
      -no-emul-boot
      -boot-load-size 4
      -boot-info-table
      -eltorito-alt-boot
      -eltorito-catalog bootpart/eltorito_catalog.img
      -e bootpart/eltorito_img2_uefi.img
      -no-emul-boot
      -append_partition 2 C12A7328-F81F-11D2-BA4B-00A0C93EC93B {{ param_iso_working_path }}/bootpart/gpt_part2_efi.img
      -appended_part_as_gpt
      -isohybrid-gpt-basdat
      -isohybrid-mbr {{ param_iso_working_path }}/bootpart/mbr_code_grub2.img
      -o {{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso
      {{ param_iso_working_path }}
  args:
    creates: "{{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso"

- name: Processing per disk config -- Verify ISO was created.
  ansible.builtin.stat:
    path: "{{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso"
  register: iso_stat

- name: Processing per disk config -- Display ISO creation result.
  ansible.builtin.debug:
    msg: "Custom ISO for {{ disk_config.name }} created successfully at {{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso"
  when: iso_stat.stat.exists
