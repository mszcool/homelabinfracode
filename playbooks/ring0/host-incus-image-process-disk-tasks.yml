---
# Tasks for processing each disk configuration to create a custom ISO

- name: Processing per disk config -- Generate autoinstall configuration
  ansible.builtin.template:
    src: "host-templates/autoinstall.yaml.j2"
    dest: "{{ param_iso_extracted_path }}/autoinstall/user-data"
    mode: '0644'
  vars:
    tp_hostname: "{{ param_random_hostname }}"
    tp_volgroupname: "{{ param_volume_group_name }}"
    tp_diskdata: "{{ disk_config }}"
    tp_packages: "{{ param_minimum_packages }}"
    tp_localdomain: "{{ localdomain }}"
    tp_root_user: "{{ root_user }}"
    tp_root_user_fullname: "{{ root_user_fullname }}"
    tp_root_user_password: "{{ param_root_user_password }}"  # This is now the encrypted password
    tp_root_user_publickey: "{{ root_user_publickey }}"

- name: Processing per disk config -- Create empty meta-data file (required by cloud-init)
  ansible.builtin.file:
    path: "{{ param_iso_extracted_path }}/autoinstall/meta-data"
    state: touch
    mode: '0644'

- name: Processing per disk config -- Modify GRUB config to use autoinstall
  ansible.builtin.lineinfile:
    path: "{{ param_iso_extracted_path }}/boot/grub/grub.cfg"
    regexp: '^menuentry ".*Install Ubuntu Server.*"'
    line: 'menuentry "Autoinstall {{ disk_config.name }}" {'
    state: present

- name: Processing per disk config -- Update GRUB kernel parameters for autoinstall
  ansible.builtin.replace:
    path: "{{ param_iso_extracted_path }}/boot/grub/grub.cfg"
    regexp: '(---.*)\s*$'
    replace: '\1 autoinstall ds=nocloud;s=/cdrom/autoinstall/'

- name: Processing per disk config -- Create custom ISO.
  ansible.builtin.command:
    cmd: >
      xorriso -as mkisofs
      -r -J
      -no-emul-boot
      -boot-load-size 4
      -boot-info-table
      -eltorito-alt-boot
      -e bootpart/eltorito_img1_bios.img
      -no-emul-boot
      -isohybrid-gpt-basdat
      -o {{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso
      {{ param_iso_extracted_path }}
  args:
    creates: "{{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso"

- name: Processing per disk config -- Verify ISO was created.
  ansible.builtin.stat:
    path: "{{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso"
  register: iso_stat

- name: Processing per disk config -- Display ISO creation result.
  ansible.builtin.debug:
    msg: "Custom ISO for {{ disk_config.name }} created successfully at {{ param_iso_destination_path }}/ubuntu-custom-{{ disk_config.name }}.iso"
  when: iso_stat.stat.exists
