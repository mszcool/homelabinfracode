#cloud-config
autoinstall:
  version: 1
  
  identity:
    hostname: {{ tp_hostname }}
    username: {{ tp_root_user }}
    password: {{ tp_root_user_password }}
    realname: {{ tp_root_user_fullname }}

  keyboard:
    layout: de
    variant: ""
    toggle: null

  ssh:
    install-server: true
    allow-pw: false
    authorized-keys:
      - {{ tp_root_user_publickey }}
  
  early-commands:
    - echo "=== Starting aggressive disk cleanup ==="
    {%- for device in tp_diskdata.devices_in_scope %}
    - echo "Cleaning disk {{ device.device }}"
    # Zero out the first 100MB of the disk to destroy all headers and metadata
    - dd if=/dev/zero of=/dev/{{ device.device }} bs=1M count=100 conv=notrunc || true
    # Zero out the last 100MB of the disk to destroy backup GPT and trailing metadata
    - DISK_SIZE=$(cat /sys/block/{{ device.device }}/size 2>/dev/null || echo 0)
    # Only zero the end if disk is larger than 100MB (204800 sectors = 100MB in 512-byte sectors)
    # This prevents seeking to negative positions on very small disks
    - if [ "$DISK_SIZE" -gt 204800 ]; then dd if=/dev/zero of=/dev/{{ device.device }} bs=512 seek=$(( DISK_SIZE - 204800 )) count=204800 conv=notrunc || true; fi
    # Force kernel to re-read partition table by writing to it
    - echo 1 > /sys/block/{{ device.device }}/device/rescan 2>/dev/null || true
    {%- endfor %}
    - echo "=== Disk cleanup completed ==="
    # Give the system time to recognize the changes
    - sleep 3
    - echo "=== Available block devices after cleanup ==="
    - ls -la /dev/sd* /dev/nvme* 2>/dev/null || true
  
  storage:
    config:
      # Define all disk devices from devices_in_scope
      {%- for device in tp_diskdata.devices_in_scope %}
 
      - type: disk
        id: disk-{{ device.device }}
        path: /dev/{{ device.device }}
        ptable: gpt
        grub_device: {{ loop.first }}
        wipe: superblock
        preserve: false
      {%- endfor %}
      
      # Create partitions on the root partition device
      {% set root_device = tp_diskdata.root_partition.device %}
      
      # Fixed EFI partition (512MB)
      - type: partition
        id: efi-part
        device: disk-{{ root_device }}
        size: 512M
        flag: boot
        grub_device: true
      
      # Format EFI partition 
      - type: format
        id: efi-format
        volume: efi-part
        fstype: fat32
        
      # Mount EFI partition
      - type: mount
        id: efi-mount
        device: efi-format
        path: /boot/efi
      
      # Fixed boot partition (1024MB)
      - type: partition
        id: boot-part
        device: disk-{{ root_device }}
        size: 1024M
        
      # Format boot partition
      - type: format
        id: boot-format
        volume: boot-part
        fstype: ext4
        
      # Mount boot partition
      - type: mount
        id: boot-mount
        device: boot-format
        path: /boot
      
      # Root OS partition with configured size
      - type: partition
        id: root-part
        device: disk-{{ root_device }}
        size: {{ tp_diskdata.root_partition.size_MB }}M
        
      # Format root partition
      - type: format
        id: root-format
        volume: root-part
        fstype: ext4
        
      # Mount root partition
      - type: mount
        id: root-mount
        device: root-format
        path: /
      
      # Create LVM partitions on all devices
      {%- for device in tp_diskdata.devices_in_scope %}

      - type: partition
        id: lvm-{{ device.device }}-part
        device: disk-{{ device.device }}
        size: -1  # Use remaining space
      {%- endfor %}
      
      # Create volume group with all LVM partitions
      - type: lvm_volgroup
        id: {{ tp_volgroupname }}
        name: {{ tp_volgroupname }}
        devices:
          {%- for device in tp_diskdata.devices_in_scope %}

          - lvm-{{ device.device }}-part
          {%- endfor %}
  
  packages:
    - {{ tp_packages|join('\n    - ') }}
  
  late-commands:
    - echo 'APT::Periodic::Update-Package-Lists "1";' > /target/etc/apt/apt.conf.d/20auto-upgrades
    - echo 'APT::Periodic::Unattended-Upgrade "1";' >> /target/etc/apt/apt.conf.d/20auto-upgrades
    - echo 'APT::Periodic::AutocleanInterval "7";' >> /target/etc/apt/apt.conf.d/20auto-upgrades
    - curtin in-target --target=/target -- sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    - curtin in-target --target=/target -- sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
    - echo "=== Creating LVM thin pools for Incus storage ==="
    - vgs {{ tp_volgroupname }}
    - lvs {{ tp_volgroupname }}
    {% for vol_name, vol_config in tp_diskdata.volume_group_volumes.items() -%}
    {% if not (vol_config.all_remaining_space is defined and vol_config.all_remaining_space) -%}
    - echo "Creating {{ vol_name }} thin pool with size {{ vol_config.size_MB }}M"
    - lvcreate --type thin-pool -n {{ vol_name }} -L {{ vol_config.size_MB }}M {{ tp_volgroupname }}
    {% endif -%}
    {% endfor -%}
    {% for vol_name, vol_config in tp_diskdata.volume_group_volumes.items() -%}
    {% if vol_config.all_remaining_space is defined and vol_config.all_remaining_space -%}
    - echo "Creating {{ vol_name }} thin pool with remaining space"
    - lvcreate --type thin-pool -n {{ vol_name }} -l 100%FREE {{ tp_volgroupname }}
    {% endif -%}
    {% endfor -%}
    - echo "=== Final LVM state ==="
    - vgs {{ tp_volgroupname }}
    - lvs {{ tp_volgroupname }}
    - echo "=== Incus will manage thin volumes within these pools ==="
    - echo "=== Setting up Incus for first-boot initialization ==="
    - curtin in-target --target=/target -- cp /cdrom/autoinstall/incus-preseed.yaml /usr/local/bin/incus-preseed.yaml
    - curtin in-target --target=/target -- chown root:root /usr/local/bin/incus-preseed.yaml
    - curtin in-target --target=/target -- chmod 600 /usr/local/bin/incus-preseed.yaml
    - echo "=== Installing Incus first-boot setup script ==="
    - curtin in-target --target=/target -- cp /cdrom/autoinstall/incus-firstboot-setup.sh /usr/local/bin/incus-firstboot-setup.sh
    - curtin in-target --target=/target -- chown root:root /usr/local/bin/incus-firstboot-setup.sh
    - curtin in-target --target=/target -- chmod 755 /usr/local/bin/incus-firstboot-setup.sh
    - echo "=== Installing Incus first-boot systemd service ==="
    - curtin in-target --target=/target -- cp /cdrom/autoinstall/incus-firstboot-setup.service /etc/systemd/system/incus-firstboot-setup.service
    - curtin in-target --target=/target -- chown root:root /etc/systemd/system/incus-firstboot-setup.service
    - curtin in-target --target=/target -- chmod 644 /etc/systemd/system/incus-firstboot-setup.service
    - curtin in-target --target=/target -- systemctl enable incus-firstboot-setup.service
    - echo "=== Incus first-boot setup configured successfully ==="