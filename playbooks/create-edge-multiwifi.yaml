---
- name: Ensure global machine pre-requisites are met
  import_playbook: bootstrap-machines.yaml

- name: Configure Raspberry Pi Edge with bridged WiFi
  hosts: localhost
  gather_facts: false
  become: true

  vars:
    main_wifi_ip_address: 192.168.1.111
    edge_wifi_adapter: wlan1
    edge_local_wifi_name: edgewifiname
    edge_wifi_ip_address: 192.168.2.1
    edge_wifi_ip_netmask: 255.255.255.0
    edge_wifi_forwarded_ports:
      - 80
      - 443
  
  tasks:
    - name: Install additional pre-requisites for WiFi bridging
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - hostapd
        - dnsmasq

    - name: Pre-Checks - Check if backup for sysctl.conf.default exists
      stat:
        path: {{ lookup('env', 'HOME') }}/sysctl.conf.default
      register: sysctl_conf_default_file

    - name: Clean-Up - Restore original sysctl.conf (if backup exists)
      copy:
        src: "{{ lookup('env', 'HOME') }}/sysctl.conf.default"
        dest: /etc/sysctl.conf
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
      when: sysctl_conf_default_file.stat.exists

    - name: Clean-Up - Edge-Wifi clean existing firewall rules
      command: ufw --force reset
      ignore_errors: yes

    - name: Clean-Up - Edge WiFi clean existing nftables rules
      command: nft flush ruleset
      ignore_errors: yes

    - name: Clean-Up - Stop hostapd service
      service:
        name: hostapd
        state: stopped
        enabled: no

    - name: Clean-Up - Stop dnsmasq service
      service:
        name: dnsmasq
        state: stopped
        enabled: no

    - name: Clean-Up - Remove local WiFi configuration using USB adapter
      command: iwconfig {{ edge_wifi_adapter }} essid "" mode managed
      ignore_errors: yes

    - name: Clean-Up - Reset IP address for USB adapter
      command: ifconfig {{ edge_wifi_adapter }} 0.0.0.0 down
      ignore_errors: yes
        
    - name: System Config - Enable IP forwarding (current session)
      command: sysctl -w net.ipv4.ip_forward=1
      ignore_errors: yes

    - name: System Config - Backup sysctl.conf.default in the user's home directory
      copy:
        src: /etc/sysctl.conf
        dest: "{{ lookup('env', 'HOME') }}/sysctl.conf.default"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
      when: not sysctl_conf_default_file.stat.exists

    - name: System Config - Enable IP forwarding (permanent in sysctl.conf)
      lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.ip_forward=1"
        state: present
      register: ip_forwarding_result
      changed_when: ip_forwarding_result.changed

    - name: Edge WiFi - Create local WiFi using USB adapter
      command: iwconfig {{ edge_wifi_adapter }} essid {{ edge_local_wifi_name }} mode ad-hoc
      ignore_errors: yes
  
    - name: Edge WiFi - Set IP address for USB adapter
      command: ifconfig {{ edge_wifi_adapter }} {{ edge_wifi_ip_address }} netmask {{ edge_wifi_ip_netmask }} up
      ignore_errors: yes

    - name: Edge WiFi - Configure nftables for HTTP(S) forwarding
      command: nft add rule ip nat prerouting iifname {{ edge_wifi_adapter }} tcp dport {{ item }} dnat to {{ main_wifi_ip_address }}
      loop: "{{ edge_wifi_forwarded_ports }}"
      register: nftables_check_result
      changed_when: nftables_check_result.rc != 0
  
    - name: Edge WiFi - Save nftables rules
      command: nft list ruleset > /etc/nftables.conf
      changed_when: false
  
    - name: Configure hostapd
      template:
        src: hostapd.conf.j2
        dest: /etc/hostapd/hostapd.conf
  
    - name: Configure dnsmasq
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
  
    - name: Restart hostapd and dnsmasq
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - hostapd
        - dnsmasq
  
    - name: Enable hostapd and dnsmasq at boot
      service:
        name: "{{ item }}"
        enabled: true
      loop:
        - hostapd
        - dnsmasq
  
    - name: Firewall - Allow HTTP connections on Raspberry Pi
      command: ufw allow 80
      register: ufw_http_result
      changed_when: ufw_http_result.stdout != ""
  
    - name: Firewall - Allow HTTPS connections on Raspberry Pi
      command: ufw allow 443
      register: ufw_https_result
      changed_when: ufw_https_result.stdout != ""

    - name: Firewall - Block SSH traffic from USB WiFi
      command: ufw deny in on {{ edge_wifi_adapter }} to any port 22
      ignore_errors: yes
  
    - name: Firewall - Enable ufw
      command: ufw --force enable
      changed_when: ufw_http_result.changed or ufw_https_result.changed

    - name: SSH - Restrict SSH access from USB WiFi
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "ListenAddress {{ main_wifi_ip_address }}"
        state: present
  
    - name: SSH - Enable connections from main WiFi
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "AllowUsers {{ admin_user }}@{{ main_wifi_ip_address }}"
        state: present
      notify:
        - Restart SSH service
  
  handlers:
    - name: Restart SSH service
      service:
        name: ssh
        state: restarted
