---
- name: Ensure global machine pre-requisites are met
  import_playbook: bootstrap-machines.yaml
  when: skip_bootstrap is not defined

- name: Configure Raspberry Pi Edge with bridged WiFi
  hosts: "{{ target_host }}"
  become: true
  gather_facts: false
  remote_user: "{{ lookup('env', 'USE_SSH_USER_NAME') }}"

  vars:
    target_host: edgepi
    edge_config: ../configs/pi-edge-config.yaml
    target_user: "{{ lookup('env', 'USE_SSH_USER_NAME') }}"
    edge_wifi_password: "{{ lookup('env', 'USE_WIFI_PASSWORD') }}"

  # First, ensure the pre-requisites are met
  pre_tasks:
    # First, make sure the environment variable for SSH access to the nodes is present.
    - include_tasks: ../tasklib/checkuserenv-tasks.yaml

  # Execute the main configuration flow.
  tasks:
    - name: Include pi-edge configuration settings
      include_vars: "{{ edge_config }}"

    - name: Pre-Checks - Check if the USE_WIFI_PASSWORD environment variable is set
      vars:
        env_var_name: "USE_WIFI_PASSWORD"
      assert:
        that:
          - "lookup('env','{{ env_var_name }}')"
        fail_msg: "Please set the {{ env_var_name }} environment variable before executing this playbook!"

    - name: Pre-Checks - Check if backup for sysctl.conf.default exists
      stat:
        path: "/home/{{ target_user }}/sysctl.conf.default"
      register: sysctl_conf_default_file

    - name: Prepare - Install additional pre-requisites for WiFi bridging
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - hostapd
        - dnsmasq
        - wpasupplicant
        - iptables-persistent

    - name: Prepare - Create /etc/iptables directory if needed
      file:
        path: /etc/iptables
        state: directory
        mode: '0755'

    - name: Clean-Up - Restore original sysctl.conf (if backup exists)
      copy:
        src: "/home/{{ target_user }}/sysctl.conf.default"
        dest: /etc/sysctl.conf
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: 0644
        remote_src: true
      when: sysctl_conf_default_file.stat.exists

    - name: Clean-Up - Edge-Wifi clean existing firewall rules
      command: ufw --force reset
      ignore_errors: true
      register: cleanupresult
      changed_when: cleanupresult.failed == false

    - name: Clean-Up - Edge WiFi clean existing iptables rules
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ main_adapter }}"
        jump: MASQUERADE
        state: absent

    - name: Clean-Up - Edge-Wifi FORWARD rule for established connections from Main WiFi to USB WiFi
      iptables:
        table: filter
        chain: FORWARD
        in_interface: "{{ main_adapter }}"
        out_interface: "{{ edge_wifi_adapter }}"
        match: state
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT
        comment: Allow existing connections from Main Wifi to USB WiFi
        state: absent

    - name: Clean-Up Edge WiFi FORWARD rule for edge wifi to main wifi
      iptables:
        table: filter
        chain: FORWARD
        in_interface: "{{ edge_wifi_adapter }}"
        out_interface: "{{ main_adapter }}"
        jump: ACCEPT
        comment: Allow USB WiFi to Main WiFi
        state: absent

    # - name: Clean-Up - Save iptables rules to variable
    #   command: iptables-save
    #   register: iptables_output
    #   changed_when: false

    # - name: Clean-Up - Storing cleaned iptables rules in file
    #   copy:
    #     content: "{{ iptables_output.stdout }}"
    #     dest: /etc/iptables/rules.v4
    #     mode: 0644
    #   when: iptables_output.stdout is defined and iptables_output.stdout|length > 0

    - name: Clean-Up - Save current iptables rules
      command: netfilter-persistent save
      tags: ['iptables']
      register: iptables_save_cleanup
      changed_when: iptables_save_cleanup.failed == false

    - name: Clean-Up - Stop hostapd service
      service:
        name: hostapd
        state: stopped
        enabled: false

    - name: Clean-Up - Stop dnsmasq service
      service:
        name: dnsmasq
        state: stopped
        enabled: false

    - name: Clean-Up - Remove IP address from USB adapter
      command: "ip addr del {{ edge_wifi_ip_address }}/{{ edge_wifi_ip_netmask }} dev {{ edge_wifi_adapter }}"
      ignore_errors: true
      register: cleanup_ip_result
      changed_when: cleanup_ip_result.failed == false

    - name: Clean-Up - Reset IP address for USB adapter
      command: ip addr flush dev {{ edge_wifi_adapter }}
      ignore_errors: true
      register: cleanupresult
      changed_when: cleanupresult.failed == false

    - name: Clean-Up - Remove local WiFi configuration using USB adapter
      command: ip link set {{ edge_wifi_adapter }} down
      ignore_errors: true
      register: cleanupresult
      changed_when: cleanupresult.failed == false

    - name: System Config - Enable IP forwarding (current session)
      command: sysctl -w net.ipv4.ip_forward=1
      ignore_errors: true
      register: systemconfigresult
      changed_when: systemconfigresult.failed == false

    - name: System Config - Backup sysctl.conf.default in the user's home directory
      copy:
        src: /etc/sysctl.conf
        dest: "/home/{{ target_user }}/sysctl.conf.default"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: 0644
        remote_src: true
      when: not sysctl_conf_default_file.stat.exists

    - name: System Config - Enable IP forwarding (permanent in sysctl.conf)
      lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.ip_forward=1"
        state: present
      register: ip_forwarding_result
      changed_when: ip_forwarding_result.changed

    - name: Edge WiFi - Stop and disable wpa_supplicant service
      service:
        name: wpa_supplicant
        state: stopped
        enabled: false

    - name: Edge WiFi - Set IP address for USB adapter
      command: "ip addr change {{ edge_wifi_ip_address }}/{{ edge_wifi_ip_netmask }} dev {{ edge_wifi_adapter }}"
      register: updateresultipusb
      changed_when: updateresultipusb.failed == false

    - name: Edge WiFi - Get all rfkill Wireless devices
      shell: |
        set -o pipefail
        rfkill list | grep Wireless
      args:
        executable: "/bin/bash"
      register: rfkill_output
      changed_when: rfkill_output.failed == false

    - name: Edge WiFi - Unblock all WiFi adapters from rfkill
      command: rfkill unblock {{ item }}
      loop: "{{ rfkill_output.stdout_lines | map('regex_replace', '^(\\d+):.*$', '\\1') | list }}"
      register: unblock_result
      changed_when: unblock_result.stdout != ""

    - name: Edge WiFi - Start USB WiFi adapter
      command: "ip link set dev {{ edge_wifi_adapter }} up"
      register: updateresultusbstart
      changed_when: updateresultusbstart.failed == false

    - name: Edge WiFi - Set default gateway for USB WiFi
      shell: |
        set -o pipefail
        existing_default_routes=$(ip route list match 0.0.0.0/0 dev "{{ main_adapter }}")
        if [[ -z $existing_default_routes ]]; then
          ip route add default via $(ip route | awk '/default/ {print $3}') dev "{{ main_adapter }}"
        fi
      args:
        executable: "/bin/bash"
      register: route_output
      changed_when: route_output.rc == 0

    - name: Edge WiFi - Configure iptables for HTTP(S) forwarding
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: "{{ main_adapter }}"
        jump: MASQUERADE
        state: present

    - name: Edge WiFi - Add FORWARD rule for established connections from Main WiFi to USB WiFi
      iptables:
        table: filter
        chain: FORWARD
        in_interface: "{{ main_adapter }}"
        out_interface: "{{ edge_wifi_adapter }}"
        match: state
        ctstate: RELATED,ESTABLISHED
        jump: ACCEPT
        comment: Allow existing connections from Main Wifi to USB WiFi
        state: present

    - name: Edge WiFi - Add FORWARD rule for edge wifi to main wifi
      iptables:
        table: filter
        chain: FORWARD
        in_interface: "{{ edge_wifi_adapter }}"
        out_interface: "{{ main_adapter }}"
        jump: ACCEPT
        comment: Allow USB WiFi to Main WiFi
        state: present

    - name: Edge-Wifi - Save current iptables rules
      command: netfilter-persistent save
      tags: ['iptables']
      register: iptables_setup_cleanup
      changed_when: iptables_setup_cleanup.failed == false

    - name: Edge WiFi - Configure dhcpcd to assign static IP for wlan0
      blockinfile:
        path: /etc/dhcpcd.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK - DO NOT EDIT"
        block: |
          interface wlan0
          static ip_address={{ edge_wifi_ip_address }}/{{ edge_wifi_ip_cidr }}
          static routers={{ main_ip_address }}
          static domain_name_servers={{ edge_wifi_dhcp_dns | join(' ') }}
      register: dhcpcd_conf_result
      changed_when: dhcpcd_conf_result.changed

    - name: Edge WiFi - Get the path of dhcpcd executable
      command: which dhcpcd
      register: dhcpcd_path_result
      changed_when: false

    - name: Edge WiFi - Set dhcp_daemon_path variable
      set_fact:
        dhcp_daemon_path: "{{ dhcpcd_path_result.stdout }}"

    - name: Edge WiFi - Start dhcpcd only after hostapd started (so it knows this is an access point)
      template:
        src: create-edge-multiwifi-dhcpcd.service.j2
        dest: /etc/systemd/system/dhcpcd.service
        mode: 0644

    - name: Edge WiFi - Generate WPA2 passphrase
      command: "wpa_passphrase \"{{ edge_local_wifi_name }}\" \"{{ edge_wifi_password }}\""
      register: wpa_passphrase_result
      changed_when: wpa_passphrase_result.failed == false

    - name: Edge WiFi - Save wpa_passphrase output
      set_fact:
        wpa_passphrase: "{{ (wpa_passphrase_result.stdout | regex_search('(psk=)(\\w+)', '\\2'))[0] }}"

    - name: Edge WiFi - Configure hostapd incl. wpa passphrase
      template:
        src: create-edge-multiwifi-hostapd.j2
        dest: /etc/hostapd/hostapd.conf
        mode: 0644

    - name: Edge WiFi - Configure dnsmasq
      template:
        src: create-edge-multiwifi-dnsmasq.j2
        dest: /etc/dnsmasq.d/dhcpd.conf
        mode: 0644

    # I had to do this to get it working.
    - name: Edge WiFi - Configure dnsmasq part 2
      template:
        src: create-edge-multiwifi-dnsmasq.j2
        dest: /etc/dnsmasq.conf
        mode: 0644

    - name: Edge WiFi - Start dnsmasq only after dhcpd started (so we have an edge adapter ip address)
      template:
        src: create-edge-multiwifi-dnsmasq.service.j2
        dest: /etc/systemd/system/dnsmasq.service
        mode: 0644

    - name: Edge WiFi - Start hostapd first such that dhcpcd and dnsmasq know wlan0 is an access point
      template:
        src: create-edge-multiwifi-hostapd.service.j2
        dest: /etc/systemd/system/hostapd.service
        mode: 0644

    - name: Edge WiFi - On Raspberry Pi, after install, hostapd is masked and must be unmasked
      ansible.builtin.systemd:
        name: hostapd.service
        masked: false

    - name: Edge WiFi - Enable hostapd and dnsmasq at boot
      service:
        name: "{{ item }}"
        enabled: true
      loop:
        - hostapd
        - dnsmasq

    - name: Edge WiFi - Restart hostapd, then dhcpcd, and finally dnsmasq
      service:
        name: "{{ item }}"
        state: restarted
      loop:
        - hostapd
        - dhcpcd
        - dnsmasq

    - name: Firewall - General allow connections on Raspberry Pi
      ufw:
        rule: allow
        port: "{{ item }}"
      loop: "{{ edge_wifi_allowed_ports }}"
      register: ufw_port_result
      changed_when: ufw_port_result.changed

    - name: Firewall - Allow SSH traffic from main adapter
      ufw:
        rule: allow
        interface: "{{ main_adapter }}"
        direction: in
        proto: tcp
        port: "{{ edge_node_ssh_port }}"

    - name: Firewall - Block SSH traffic from USB WiFi
      ufw:
        rule: deny
        proto: tcp
        interface: "{{ edge_wifi_adapter }}"
        direction: in
        port: "{{ edge_node_ssh_port }}"

    - name: Firewall - Enable ufw
      command: ufw --force enable
      register: ufw_start_result
      changed_when: ufw_start_result.changed

    - name: Reboot Workaround - Create hostapd-restart.sh script
      copy:
        content: |
          #!/bin/bash
          systemctl restart hostapd
          systemctl restart dnsmasq
        dest: /usr/local/bin/hostapd-restart.sh
        mode: '0755'

    - name: Reboot Workaround - Create hostapd-restart systemd service
      template:
        src: create-edge-multiwifi-hostapd-restart.j2
        dest: /etc/systemd/system/hostapd-restart.service
        mode: '0644'

    - name: Reboot Workaround - Enable hostapd-restart service
      systemd:
        name: hostapd-restart.service
        state: started
        enabled: true
