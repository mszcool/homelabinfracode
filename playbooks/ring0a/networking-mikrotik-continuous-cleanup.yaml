---
- name: Networking continuous setup for Mikrotik router -- Clean-up of firewall rules, devices, DNS registrations etc.
  hosts: mainrouter
  become: false
  gather_facts: false
  remote_user: "{{ users.automation.name }}"

  vars:
    ansible_connection: ansible.netcommon.network_cli
    ansible_network_os: community.network.routeros
    param_firewall_rule_groups: "{{ firewall_rules }}"
    param_devices_mapped: "{{ devices_mapped }}"
    param_networks: "{{ networks }}"
    param_site_vpn_config: "{{ site_vpn_config }}"
    param_end_marker_text: "{{ end_marker_text }}"
    param_start_marker_text: "{{ start_marker_text }}"
    param_router_host_config: "{{ hostsConfig[inventory_hostname] }}"

  tasks:
    - name: Prepare localhost -- install python3-paramiko on host.
      ansible.builtin.apt:
        name: python3-paramiko
        state: present
      delegate_to: localhost

    # Create a list of protected interfaces that should never be removed
    - name: Safety -- Create list of protected interfaces
      ansible.builtin.set_fact:
        protected_interfaces: []

    - name: Safety -- Add WAN interface to protected list
      ansible.builtin.set_fact:
        protected_interfaces: "{{ protected_interfaces + [param_router_host_config.wan_interface.interface] }}"
      when: param_router_host_config.wan_interface is defined and param_router_host_config.wan_interface.interface is defined

    - name: Safety -- Add LAN interfaces to protected list
      ansible.builtin.set_fact:
        protected_interfaces: "{{ protected_interfaces + (param_router_host_config.lan_interface.interfaces | split(',') | map('trim') | list) }}"
      when: param_router_host_config.lan_interface is defined and param_router_host_config.lan_interface.interfaces is defined

    - name: Safety -- Add LAN bridge to protected list
      ansible.builtin.set_fact:
        protected_interfaces: "{{ protected_interfaces + [param_router_host_config.lan_interface.bridge] }}"
      when: param_router_host_config.lan_interface is defined and param_router_host_config.lan_interface.bridge is defined

    - name: Clean-Up -- Firewall Rules -- Create arrays of all filter and NAT rules to identify orphaned rules
      ansible.builtin.set_fact:
        configured_filter_rules: []
        configured_nat_rules: []

    - name: Clean-Up -- Firewall Rules -- Populate the array for the filter rules with the configured ones
      ansible.builtin.set_fact:
        configured_filter_rules: "{{ configured_filter_rules + [item.1.comment + ' -- ' + item.1.name] }}"
      loop: "{{ firewall_rules | subelements('filter_rules', skip_missing=true) }}"
      when: item is defined and item.0 is defined and item.1 is defined
      loop_control:
        label: "{{ item.0.comment }} -- {{ item.1.name }}"

    - name: Clean-Up -- Firewall Rules -- Add the START-Marker placeholder rules for the filters to avoid cleaning them up
      ansible.builtin.set_fact:
        configured_filter_rules: "{{ configured_filter_rules + [item.comment + '_' + param_start_marker_text + ' -- ' + item.name] }}"
      loop: "{{ firewall_rules }}"
      loop_control:
        label: "{{ item.comment }} -- {{ item.name }}"

    - name: Clean-Up -- Firewall Rules -- Add the END-Marker placeholder rules for the filters to avoid cleaning them up
      ansible.builtin.set_fact:
        configured_filter_rules: "{{ configured_filter_rules + [item.comment + '_' + param_end_marker_text + ' -- ' + item.name] }}"
      loop: "{{ firewall_rules }}"
      loop_control:
        label: "{{ item.comment }} -- {{ item.name }}"

    - name: Clean-up -- Firewall Rules -- Remove orphaned filter rules -- Create the string
      ansible.builtin.set_fact:
        configured_filter_rules_string: "{{ configured_filter_rules | join(',') }}"

    - name: Clean-Up -- Firewall Rules -- Remove orphaned filter rules
      community.routeros.command:
        commands:
          - >
            :local configuredRules [:toarray "{{ configured_filter_rules_string }}"];
            :foreach rule in=[/ip firewall filter find] do={
              :local comment [/ip firewall filter get $rule comment];
              :local isManaged false;
              :foreach configRule in=$configuredRules do={
                :if ($comment = $configRule) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned filter rule: " . $comment);
                /ip firewall filter remove $rule;
              };
            };

    - name: Clean-Up -- Firewall Rules -- Populate the array for the NAT rules with the configured ones
      ansible.builtin.set_fact:
        configured_nat_rules: "{{ configured_nat_rules + [item.1.comment + ' -- ' + item.1.name] }}"
      loop: "{{ firewall_rules | subelements('inbound_nat_rules', skip_missing=true) }}"
      when: item is defined and item.0 is defined and item.1 is defined
      loop_control:
        label: "{{ item.0.comment }} -- {{ item.1.name }}"

    - name: Clean-Up -- Firewall Rules -- Add the START-Marker placeholder rules for the NAT rules to avoid cleaning them up
      ansible.builtin.set_fact:
        configured_nat_rules: "{{ configured_nat_rules + [item.comment + '_' + param_start_marker_text + ' -- ' + item.name] }}"
      loop: "{{ firewall_rules }}"
      loop_control:
        label: "{{ item.comment }} -- {{ item.name }}"

    - name: Clean-Up -- Firewall Rules -- Add the END-Marker placeholder rules for the NAT rules to avoid cleaning them up
      ansible.builtin.set_fact:
        configured_nat_rules: "{{ configured_nat_rules + [item.comment + '_' + param_end_marker_text + ' -- ' + item.name] }}"
      loop: "{{ firewall_rules }}"
      loop_control:
        label: "{{ item.comment }} -- {{ item.name }}"

    - name: Clean-Up -- Firewall Rules -- Remove orphaned NAT rules -- Create the string
      ansible.builtin.set_fact:
        configured_nat_rules_string: "{{ configured_nat_rules | join(',') }}"

    - name: Clean-Up -- Firewall Rules - Remove orphaned NAT rules
      community.routeros.command:
        commands:
          - >
            :local configuredRules [:toarray "{{ configured_nat_rules_string }}"];
            :foreach rule in=[/ip firewall nat find] do={
              :local comment [/ip firewall nat get $rule comment];
              :local isManaged false;
              :foreach configRule in=$configuredRules do={
                :if ($comment = $configRule) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned NAT rule: " . $comment);
                /ip firewall nat remove $rule;
              };
            };

    - name: Clean-Up -- Static DNS Entries -- Create array for DNS Entry identification
      ansible.builtin.set_fact:
        configured_static_dns_entries: []
      when: devices_mapped is defined

    - name: Clean-Up -- Static DNS Entries -- Populate the array with the configured static DNS entries
      ansible.builtin.set_fact:
        configured_static_dns_entries: "{{ configured_static_dns_entries + item.1.dns_names }}"
      loop: "{{ devices_mapped | subelements('members') }}"
      when: item.1.dns_names is defined
      loop_control:
        label: "{{ item.0.group }} - {{ item.1.alias }}"

    - name: Clean-Up -- Static DNS Entries -- Remove orphaned static DNS entries -- Create the string
      ansible.builtin.set_fact:
        configured_static_dns_entries_string: "{{ configured_static_dns_entries | join(',') }}"
      when: devices_mapped is defined

    - name: Clean-Up -- Static DNS Entries -- Remove orphaned static DNS entries
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_static_dns_entries_string }}"];
            :foreach entry in=[/ip dns static find] do={
              :local name [/ip dns static get $entry name];
              :local isManaged false;
              :foreach configEntry in=$configuredEntries do={
                :if ($name = $configEntry) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned static DNS entry: " . $name);
                /ip dns static remove $entry;
              };
            };
      register: cleanup_static_dns_entries_results

    - name: Clean-Up -- DHCP Leases -- Create array for DHCP Lease identification
      ansible.builtin.set_fact:
        configured_dhcp_leases: []
      when: devices_mapped is defined

    - name: Clean-Up -- DHCP Leases -- Populate the array with the configured static DHCP leases
      ansible.builtin.set_fact:
        configured_dhcp_leases: "{{ configured_dhcp_leases + [device_group.group + ' - ' + device.alias] }}"
      loop: "{{ devices_mapped }}"
      loop_control:
        label: "{{ item.group }}"
      vars:
        device_group: "{{ item }}"
      loop: "{{ devices_mapped | subelements('members') }}"
      loop_control:
        label: "{{ item.0.group }} - {{ item.1.alias }}"
      vars:
        device_group: "{{ item.0 }}"
        device: "{{ item.1 }}"

    - name: Clean-Up -- DHCP Leases -- Remove orphaned static DHCP leases
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_dhcp_leases | join(',') }}"];
            :foreach entry in=[/ip dhcp-server lease find] do={
              :local name [/ip dhcp-server lease get $entry comment];
              :local isManaged false;
              :foreach configEntry in=$configuredEntries do={
                :if ($name = $configEntry) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned static DHCP lease: " . $name);
                /ip dhcp-server lease remove $entry;
              };
            };

    - name: Clean-Up -- Firewall Address Lists -- Create array for Address List identification
      ansible.builtin.set_fact:
        configured_address_lists: []
      when: devices_mapped is defined

    - name: Clean-Up -- Firewall Address Lists -- Populate the array with the configured address lists
      ansible.builtin.set_fact:
        configured_address_lists: "{{ configured_address_lists + [item.group] }}"
      loop: "{{ devices_mapped }}"
      loop_control:
        label: "{{ item.group }}"

    - name: Clean-Up -- Firewall Address Lists -- Remove orphaned address lists
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_address_lists | join(',') }}"];
            :foreach entry in=[/ip firewall address-list find] do={
              :local listName [/ip firewall address-list get $entry list];
              :local isManaged false;
              :foreach configEntry in=$configuredEntries do={
                :if ($listName = $configEntry) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned address list: " . $listName);
                /ip firewall address-list remove $entry;
              };
            };

    - name: Clean-Up -- DHCP Server -- Prepare array for configured DHCP servers
      ansible.builtin.set_fact:
        configured_dhcp_servers: []
      when: param_networks is defined

    - name: Clean-Up -- DHCP Server -- Populate the array with the configured DHCP servers
      ansible.builtin.set_fact:
        configured_dhcp_servers: "{{ configured_dhcp_servers + [item.name] }}"
      loop: "{{ param_networks | selectattr('dhcp_settings.enabled', 'equalto', true) | list }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Clean-Up -- DHCP Server -- Remove orphaned DHCP servers
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_dhcp_servers | join(',') }}"];
            :foreach entry in=[/ip dhcp-server find] do={
              :local name [/ip dhcp-server get $entry name];
              :local isManaged false;
              :foreach configEntry in=$configuredEntries do={
                :if ($name = $configEntry) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned DHCP server: " . $name);
                /ip dhcp-server remove $entry;
              };
            };
    
    - name: Clean-Up -- DHCP Server -- Remove orphaned networks
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_dhcp_servers | join(',') }}"];
            :foreach entry in=[/ip dhcp-server network find] do={
              :local name [/ip dhcp-server network get $entry comment];
              :local isManaged false;
              :foreach configEntry in=$configuredEntries do={
                :if ($name = $configEntry) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned DHCP server network: " . $name);
                /ip dhcp-server network remove $entry;
              };
            };

    - name: Clean-Up -- DHCP Server -- Remove orphaned address pools
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_dhcp_servers | join(',') }}"];
            :foreach entry in=[/ip pool find] do={
              :local name [/ip pool get $entry name];
              :local isManaged false;
              :foreach configEntry in=$configuredEntries do={
                :if ($name = $configEntry) do={
                  :set isManaged true;
                };
              };
              :if (!$isManaged) do={
                :put ("Removing orphaned address pool: " . $name);
                /ip pool remove $entry;
              };
            };

    - name: Clean-Up -- Networks -- Collect configured VLAN interface names
      ansible.builtin.set_fact:
        configured_vlans: []
      when: param_networks is defined

    - name: Clean-Up -- Networks -- Populate the array with the configured VLAN interface names
      ansible.builtin.set_fact:
        configured_vlans: "{{ configured_vlans + [item.interface] }}"
      loop: "{{ param_networks | selectattr('interface_type', 'equalto', 'vlan') | list }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Clean-Up -- Networks -- Remove orphaned VLANs (excluding protected interfaces)
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_vlans | join(',') }}"];
            :local protectedEntries [:toarray "{{ protected_interfaces | join(',') }}"];
            :foreach entry in=[/interface vlan find] do={
              :local name [/interface vlan get $entry name];
              :local isManaged false;
              :local isProtected false;
              :foreach configEntry in=$configuredEntries do={
                :if ($name = $configEntry) do={
                  :set isManaged true;
                };
              };
              :foreach protectedEntry in=$protectedEntries do={
                :if ($name = $protectedEntry) do={
                  :set isProtected true;
                };
              };
              :if (!$isManaged && !$isProtected) do={
                :put ("Removing orphaned VLAN: " . $name);
                /interface vlan remove $entry;
              };
            };

    - name: Clean-Up -- Networks -- Collect configured interface names
      ansible.builtin.set_fact:
        configured_interfaces: []
      when: param_networks is defined

    - name: Clean-Up -- Networks -- Populate the array with all configured interface names
      ansible.builtin.set_fact:
        configured_interfaces: "{{ configured_interfaces + [item.interface] }}"
      loop: "{{ param_networks }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Clean-Up -- Networks -- Remove orphaned IP addresses (excluding protected interfaces)
      community.routeros.command:
        commands:
          - >
            :local configuredEntries [:toarray "{{ configured_interfaces | join(',') }}"];
            :local protectedEntries [:toarray "{{ protected_interfaces | join(',') }}"];
            :foreach entry in=[/ip address find] do={
              :local interfaceName [/ip address get $entry interface];
              :local isManaged false;
              :local isProtected false;
              :foreach configEntry in=$configuredEntries do={
                :if ($interfaceName = $configEntry) do={
                  :set isManaged true;
                };
              };
              :foreach protectedEntry in=$protectedEntries do={
                :if ($interfaceName = $protectedEntry) do={
                  :set isProtected true;
                };
              };
              :if (!$isManaged && !$isProtected) do={
                :local address [/ip address get $entry address];
                :put ("Removing orphaned IP address: " . $address . " on interface " . $interfaceName);
                /ip address remove $entry;
              };
            };
