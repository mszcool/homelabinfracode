---
- name: Baseline for each Proxmox node
  hosts: incus
  become: true
  gather_facts: true
  remote_user: "{{ root_user }}"

  vars:
    incus_root_user: "{{ root_user }}"
    incus_root_password_env: "{{ root_user_password_env }}"
    incus_root_publickey: "{{ root_user_publickey }}"
    param_incus_config: "{{ incus_config }}"
    param_volume_group_name: "{{ volume_group_name | default('vg0') }}"
    param_volume_group_volume_root: "{{ volume_group_volume_root | default('root') }}"
    param_volume_group_volume_images: "{{ volume_group_volume_images | default('images') }}"
    param_volume_group_volume_instances: "{{ volume_group_volume_instances | default('instances') }}"

  tasks:
    - name: Set the SSH user name in case it is not the default.
      ansible.builtin.set_fact:
        ansible_user: "{{ incus_root_user }}"
        param_hostname: "{{ hostvars[inventory_hostname]['hostname'] }}"
        param_incus_network: "{{ hostvars[inventory_hostname]['incus_network'] }}"
        param_disk_config: "{{ hostvars[inventory_hostname]['disk_config'] | default({}) }}"

    - name: Run baseline installation tasks
      ansible.builtin.include_tasks: ../tasks/bootstrap_tasks.yaml

    - name: Before doing anything, validate if the LVM setup for root is according to parameters using LVM ansible modules.
      ansible.builtin.include_tasks: ../tasks/lvm_validate_rootfs.yaml

    - name: If the environment variable for the password set, set input variable for the password generation tasks.
      ansible.builtin.set_fact:
        generate_password_input: "{{ lookup('env', incus_root_password_env) | default('') }}"
      when: lookup('env', incus_root_password_env) | default('') | length > 0
      no_log: true

    - name: If the environment variable in incus_root_password_env is set, update the password.
      ansible.builtin.user:
        name: "{{ incus_root_user }}"
        password: "{{ generate_password_input }}"
      when: generate_password_input is defined and generate_password_input | length > 0

    - name: Set the Incus server admin SSH Key.
      ansible.posix.authorized_key:
        user: "{{ incus_root_user }}"
        state: present
        key: "{{ incus_root_publickey }}"

    - name: Allow Incus remote access through HTTPS
      community.general.ufw:
        rule: allow
        port: "{{ param_incus_config.port }}"
        proto: tcp

    - name: Ensure Incus and required packages are installed
      ansible.builtin.package:
        name:
          - incus
          - qemu-utils
          - qemu-system-x86
        state: present

    - name: Check if Incus is already initialized
      ansible.builtin.shell: |
        incus profile show default | grep -E "^devices:" -A 20 | grep -E "(root|eth0)" | wc -l
      register: incus_status
      failed_when: false
      changed_when: false

    - name: Determine if Incus needs initialization
      ansible.builtin.set_fact:
        incus_needs_init: "{{ incus_status.stdout | int < 2 }}"

    - name: Create temporary directory for Incus preseed file
      ansible.builtin.tempfile:
        state: directory
        suffix: .incus
      register: temp_dir
      when: incus_needs_init | bool

    - name: Generate Incus preseed configuration from template
      ansible.builtin.template:
        src: incus-preseed.yaml.j2
        dest: "{{ temp_dir.path }}/incus-preseed.yaml"
        mode: '0600'
      vars:
        tp_incus_config: "{{ param_incus_config }}"
        tp_incus_netconfig: "{{ param_incus_network }}"
      when: incus_needs_init | bool

    - name: Initialize Incus with preseed configuration
      ansible.builtin.shell: incus admin init --preseed < {{ temp_dir.path }}/incus-preseed.yaml
      args:
        creates: /var/lib/incus/database/global/db.bin
      when: incus_needs_init | bool

    - name: Clean up temporary directory
      ansible.builtin.file:
        path: "{{ temp_dir.path }}"
        state: absent
      when: 
        - incus_needs_init | bool
        - temp_dir is defined
