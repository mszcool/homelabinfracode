---
- name: Pre-validation - Check preseed files exist for all hosts
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
    - name: Validate preseed files exist for all incus hosts
      ansible.builtin.stat:
        path: "{{ incus_preseed_output_dir }}/incus.preseed.{{ hostvars[item]['host_config_name'] }}.yaml"
      register: preseed_validation
      loop: "{{ groups['incus'] }}"
      failed_when: not preseed_validation.stat.exists
      vars:
        msg: "Missing preseed file for host {{ item }} with config {{ hostvars[item]['host_config_name'] }}"

- name: Baseline for each Incus node
  hosts: incus
  become: true
  gather_facts: true
  remote_user: "{{ root_user }}"

  vars:
    incus_root_user: "{{ root_user }}"
    incus_root_password_env: "{{ root_user_password_env }}"
    incus_root_publickey: "{{ root_user_publickey }}"
    param_incus_config: "{{ incus_config }}"
    param_volume_group_name: "{{ volume_group_name | default('vg0') }}"
    param_volume_group_volume_root: "{{ volume_group_volume_root | default('root') }}"
    param_volume_group_volume_images: "{{ volume_group_volume_images | default('images') }}"
    param_volume_group_volume_instances: "{{ volume_group_volume_instances | default('instances') }}"
    param_volume_disk_configs: "{{ param_host_configs | map(attribute='virtual_disk_config') | list }}"
    param_host_config_name: "{{ hostvars[inventory_hostname]['host_config_name'] }}"
    param_host_configs: "{{ host_configs | default([]) }}"
    param_incus_network: >-
      {{
        (host_configs
         | selectattr('name', 'equalto', hostvars[inventory_hostname]['host_config_name'])
         | map(attribute='network_config')
         | first)
        | default({})
      }}

  tasks:
    - name: Set the SSH user name in case it is not the default.
      ansible.builtin.set_fact:
        ansible_user: "{{ incus_root_user }}"
        param_hostname: "{{ hostvars[inventory_hostname]['hostname'] }}"
        param_host_config_name: "{{ hostvars[inventory_hostname]['host_config_name'] }}"
        param_host_configs: "{{ host_configs | default([]) }}"
        param_volume_disk_configs: "{{ param_host_configs | map(attribute='virtual_disk_config') | list }}"
        param_incus_network: >-
          {{
            (host_configs
             | selectattr('name', 'equalto', hostvars[inventory_hostname]['host_config_name'])
             | map(attribute='network_config')
             | first)
            | default({})
          }}
        param_preseed_file_path: "{{ incus_preseed_output_dir }}/incus.preseed.{{ hostvars[inventory_hostname]['host_config_name'] }}.yaml"

    - name: Validate that preseed file exists for this host configuration
      ansible.builtin.stat:
        path: "{{ param_preseed_file_path }}"
      register: preseed_file_stat
      delegate_to: localhost
      become: false

    - name: Fail if preseed file does not exist
      ansible.builtin.fail:
        msg: "Required preseed file '{{ param_preseed_file_path }}' does not exist for host config '{{ param_host_config_name }}'"
      when: not preseed_file_stat.stat.exists

    - name: Run baseline installation tasks
      ansible.builtin.include_tasks: ../tasks/bootstrap_tasks.yaml

    - name: Before doing anything, validate if the LVM setup for root is according to parameters using LVM ansible modules.
      ansible.builtin.include_tasks: ../tasks/lvm_validate_rootfs.yaml

    - name: If the environment variable for the password set, set input variable for the password generation tasks.
      ansible.builtin.set_fact:
        generate_password_input: "{{ lookup('env', incus_root_password_env) | default('') }}"
      when: lookup('env', incus_root_password_env) | default('') | length > 0
      no_log: true

    - name: If the environment variable in incus_root_password_env is set, update the password.
      ansible.builtin.user:
        name: "{{ incus_root_user }}"
        password: "{{ generate_password_input | password_hash('sha512') }}"
      when: generate_password_input is defined and generate_password_input | length > 0

    - name: Set the Incus server admin SSH Key.
      ansible.posix.authorized_key:
        user: "{{ incus_root_user }}"
        state: present
        key: "{{ incus_root_publickey }}"

    - name: Allow Incus remote access through HTTPS
      community.general.ufw:
        rule: allow
        port: "{{ param_incus_config.port }}"
        proto: tcp

    - name: Ensure Incus and required packages are installed
      ansible.builtin.package:
        name:
          - incus
          - qemu-utils
          - qemu-system-x86
        state: present

    - name: Check if Incus is already initialized
      ansible.builtin.shell: |
        set -o pipefail && incus profile show default | grep -E "^devices:" -A 20 | grep -E "(root|eth0)" | wc -l
      register: incus_status
      failed_when: false
      changed_when: false

    - name: Determine if Incus needs initialization
      ansible.builtin.set_fact:
        incus_needs_init: "{{ incus_status.stdout | int < 2 }}"

    - name: Copy preseed file to target host
      ansible.builtin.copy:
        src: "{{ param_preseed_file_path }}"
        dest: "/tmp/incus-preseed.yaml"
        mode: '0600'
      when: incus_needs_init | bool

    - name: Initialize Incus with preseed configuration
      ansible.builtin.shell: incus admin init --preseed < /tmp/incus-preseed.yaml
      args:
        creates: /var/lib/incus/database/global/db.bin
      when: incus_needs_init | bool

    - name: Clean up preseed file from target host
      ansible.builtin.file:
        path: "/tmp/incus-preseed.yaml"
        state: absent
      when: incus_needs_init | bool

    - name: Copy production profile from default project to production project
      ansible.builtin.shell: |
        if ! incus profile show production --project production >/dev/null 2>&1; then
          # Create the profile in production project first
          incus profile create production --project production
          # Copy the profile configuration from default project
          incus profile show production --project default > /tmp/production-profile.yaml
          incus profile edit production --project production < /tmp/production-profile.yaml
          rm -f /tmp/production-profile.yaml
        fi
      when: incus_needs_init | bool
